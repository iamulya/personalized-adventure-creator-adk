# adventure_creator/agents.py
from google.adk.agents import Agent
from google.adk.tools import google_search

from .config import MODEL_NAME
from .custom_tools import (
    google_maps_places_text_search_tool,
    google_maps_geocoding_tool,
    generate_kml_tool
)

# 1. LocationResearchAgent
location_research_agent = Agent(
    name="LocationResearchAgent",
    model=MODEL_NAME,
    instruction="You are a research assistant. Given an adventure description, identify general areas and specific Points of Interest (POIs) that match. Use Google Search for broad research and the 'search_places_text' tool for specific POIs like waterfalls, covered bridges, etc. The 'search_places_text' tool returns a list of POIs, each containing 'name', 'address', 'place_id', and potentially 'geometry' (with lat/lng). Prioritize using the 'search_places_text' tool. Return the list of found POIs.",
    description="Identifies general areas and specific POIs based on an adventure description using Google Search and Places API.",
    tools=[google_search, google_maps_places_text_search_tool]
)

# 2. POICoordinateFetcherAgent
poi_coordinate_fetcher_agent = Agent(
    name="POICoordinateFetcherAgent",
    model=MODEL_NAME,
    instruction="You are a data fetcher. You will receive a list of POIs. Each POI might have 'name', 'address', 'place_id', and 'geometry' (which contains 'location' with 'lat' and 'lng'). Your task is to ensure each POI has 'lat' and 'lng' coordinates. \n1. If a POI already has  and , extract these values directly for 'lat' and 'lng'. \n2. If a POI is missing these explicit coordinates in its 'geometry', use its 'address' with the 'geocode_address' tool to get them. \nReturn a list of POIs, each guaranteed to have 'name', 'address' (original or fetched), 'lat', and 'lng'. If geocoding fails for an address, note the error but try to process other POIs.",
    description="Gets precise coordinates for identified POIs. Uses existing coordinates from 'geometry' if available, otherwise geocodes using 'address'.",
    tools=[google_maps_geocoding_tool]
)

# 3. MapDataFormatterAgent
map_data_formatter_agent = Agent(
    name="MapDataFormatterAgent",
    model=MODEL_NAME,
    instruction="You are a data structuring expert. Given a list of POIs (each POI should have 'name', 'address', 'lat', and 'lng'), structure this data into a clean list of dictionaries. Each dictionary in the output list must represent a POI and contain exactly the following keys: 'name' (string), 'description' (string - use the POI's 'address' for this field), 'lat' (float), and 'lng' (float). Ensure lat and lng are correctly formatted as floating-point numbers. Filter out any POIs that are missing 'lat' or 'lng' or have error messages instead of coordinates.",
    description="Structures POI data (name, description, lat/long) into a final list of dictionaries suitable for KML generation, ensuring 'lat' and 'lng' are floats."
)

# 4. KMLGeneratorAgent
kml_generator_agent = Agent(
    name="KMLGeneratorAgent",
    model=MODEL_NAME,
    instruction="You are a map file generator. You will receive a structured list of POIs (each with 'name', 'description', 'lat', 'lng'). Use the 'generate_kml_content' tool to create KML content from this list. The tool will automatically save the KML as an artifact. After the tool call, confirm that the KML file has been generated by relaying the message from the tool, which includes the artifact name.",
    description="Generates KML file content from structured POI data and saves it as an artifact.",
    tools=[generate_kml_tool]
)
